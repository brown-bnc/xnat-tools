name: publish 
on:
  push:
    branches:
      - master
jobs: 
  publish:
    if: "!startsWith(github.event.commits[0].message, 'ci:|docs:|test:|')"
    runs-on: ubuntu-latest
    name: 'Bump version and create changelog with commitizen'
    steps:
    - name: Check out
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Create bump and changelog
      uses: commitizen-tools/commitizen-action@0.5.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - name: Store recent changelog changes
      run: |
        echo 'CHANGELOG<<EOF' >> $GITHUB_ENV
        grep -B10000 -m2 "^## v"  CHANGELOG.md | sed '$d' >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
    - name: Store VERSION
      run: |
        echo "VERSION=$(cat pyproject.toml | grep version | head -1 | awk -F: '{ print $1 }'| sed 's/[\",]//g'| tr -d 'version = ')" >> $GITHUB_ENV
    - name: Copy CHANGELOG to docs and push to remote
      id: commit
      run: |
        echo "Removing CHANGELOG from docs"
        rm docs/changelog.md
        echo "Adding new CHANGELOG to docs"
        cp -f CHANGELOG.md docs/changelog.md

        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        git add docs/changelog.md
        git status
        git commit -m "docs: Update docs/changelog.md"
        git push
    - name: Release to GitHub
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 'v${{ env.VERSION }}'
        release_name: 'v${{ env.VERSION }}'
        body: ${{ env.CHANGELOG }}
        draft: false
        prerelease: false
    - name: Set up Python 3.7 
      uses: actions/setup-python@v2 
      with: 
        python-version: '3.7.5' 
    - name: Install dependencies 
      run: | 
        python -m pip install --upgrade pip 
        pip install .
        pip install mkdocs mkdocs-material mkdocstrings mkdocs-versioning mkdocs-markdownextradata-plugin
    - name: Set up mkdocs config 
      run: (envsubst 'v${VERSION}' < mkdocs-template.yml) > mkdocs.yml
    - name: Sync 
      run: | 
        git pull
        mkdocs-versioning sync
        rm -rf ./site/.git/
    - name: Build
      run: mkdocs build
    - name: Deploy
      run: mkdocs-versioning -v deploy
