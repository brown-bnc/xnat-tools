{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to xnat-tools \u00b6 XNAT tools is maintained by members of the Behavioral Neuroimaging Core at Brown University. This package facilitates the export and conversion of data stored in Brown's XNAT platform, to the BIDS format. The optimal way to install and run this package depends on your computation environment. We outline all the possibilities.","title":"Overview"},{"location":"#welcome-to-xnat-tools","text":"XNAT tools is maintained by members of the Behavioral Neuroimaging Core at Brown University. This package facilitates the export and conversion of data stored in Brown's XNAT platform, to the BIDS format. The optimal way to install and run this package depends on your computation environment. We outline all the possibilities.","title":"Welcome to xnat-tools"},{"location":"bids_postprocess/","text":"bids-postprocess \u00b6 Script for performing post BIDSIFY processing. At the moment it inserts the IntendedFor field to JSON sidecart for fieldmap data Usage : $ bids-postprocess [ OPTIONS ] SESSION BIDS_EXPERIMENT_DIR Arguments : SESSION : XNAT Session ID, that is the Accession # for an experiment. [required] BIDS_EXPERIMENT_DIR : Root output directory for exporting the files [required] Options : -S, --session-suffix TEXT : Suffix of the session for BIDS defaults to 01. This will produce a session label of sess-01. You likely only need to change the default for multi-session studies [default: 01] -i, --includeseq TEXT : Include this participant only, can be specified multiple times [default: ] -s, --skipseq TEXT : Skip this participant, can be specified multiple times [default: ] --log-file TEXT : File to send logs to [default: ] -v, --verbose : Verbose level. Can be specified multiple times to increase verbosity [default: 0] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"bids-postprocess"},{"location":"bids_postprocess/#bids-postprocess","text":"Script for performing post BIDSIFY processing. At the moment it inserts the IntendedFor field to JSON sidecart for fieldmap data Usage : $ bids-postprocess [ OPTIONS ] SESSION BIDS_EXPERIMENT_DIR Arguments : SESSION : XNAT Session ID, that is the Accession # for an experiment. [required] BIDS_EXPERIMENT_DIR : Root output directory for exporting the files [required] Options : -S, --session-suffix TEXT : Suffix of the session for BIDS defaults to 01. This will produce a session label of sess-01. You likely only need to change the default for multi-session studies [default: 01] -i, --includeseq TEXT : Include this participant only, can be specified multiple times [default: ] -s, --skipseq TEXT : Skip this participant, can be specified multiple times [default: ] --log-file TEXT : File to send logs to [default: ] -v, --verbose : Verbose level. Can be specified multiple times to increase verbosity [default: 0] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"bids-postprocess"},{"location":"changelog/","text":"v1.0.3 (2021-01-14) \u00b6 Fix \u00b6 add and abstract string preprojecissing of proj, sub, sess v1.0.2 (2020-11-23) \u00b6 Fix \u00b6 remove other heudiconv directories that messup overwrite remove other heudiconv directories that messup overwrite add blank space before heudiconv's overwrite flag add blank space before heudiconv's overwrite flag v1.0.1 (2020-11-17) \u00b6 Perf \u00b6 capture duplicate warnings Fix \u00b6 overwrite : don't ignore errors, and pass flag to heudiconv bring back saving the file after setting DICOM header v1.0.0 (2020-10-22) \u00b6 Refactor \u00b6 Merge pull request #47 from brown-bnc/feat/add-documentation --verbose and --very verbose for postprocess change the format of CLI inputs to be consistent to unix style put dicom-expoert and run-heudiconv back in separate files dicom_export : clomplete options/inputs and run through WIP : add dicom_export to xnat2bids_typer WIP : start skeleton for typer cli for xnat2bids BREAKING CHANGE \u00b6 Changes the CLI to use typer, adds MkDocs, pre-commit hooks and Github Actions Fix \u00b6 bring back lost build-system from pyproject file get xnat2bids and tests back working adjust sintax for commands in separate files Feat \u00b6 transition posprocessing to typer v0.1.7 (2020-07-06) \u00b6 Fix \u00b6 tests : add full path and make sequences strings tests : add misssing imports fixes to logging, seriesDescList indexing and dicom extension (.IMA) Feat \u00b6 WIP working on overwrite behavior add identifier to logfiles check dicom extension, add formatting v0.1.6 (2020-05-28) \u00b6 Fix \u00b6 put back the poetry.lock, didn't know it was needed for the docker build add session to the path of IntendedFor nii file v0.1.5 (2020-05-22) \u00b6 v0.1.4 (2020-05-19) \u00b6 v0.1.3 (2020-04-08) \u00b6 Feat \u00b6 Add files and functions to insert IntendedFor field add --session_suffix as a required input v0.1.2 (2020-03-09) \u00b6 Fix \u00b6 coloredlogs respect logging level Feat \u00b6 add minimal test to have the ability of making sure things don't break add --skilist to arguments v0.1.1 (2020-03-06) \u00b6 Fix \u00b6 We are now using SSL! v0.1.0 (2020-02-28) \u00b6 Fix \u00b6 enter password only once for xnat2bids v0.1.0-beta (2020-02-26) \u00b6 Fix \u00b6 remove heudiconv extras make host optional to use default value remove bid_validator, fix empty log, parse only know args bidsmap now works properly. Add missing arguments names are no longer converted to lower-case Feat \u00b6 add color to logging ask for password, add logging, add sequence list 0.1.0-alpha (2020-02-18) \u00b6 Fix \u00b6 remove selected list change dicom tags to match bidsname for protocol and series description miscelaneous typo/type errors use argument bidsmap json file, take logs out of bids directory replace undescores for dashes in session and subject labels add xnat_tools to module imports user variable for bids_root_dir instead of hardcoded path add package prefix to imports Feat \u00b6 detect multiple runs handle aascout planes and mprage rms add xnat2bids code bring in xnat2bids code from plugin","title":"All Versions"},{"location":"changelog/#v103-2021-01-14","text":"","title":"v1.0.3 (2021-01-14)"},{"location":"changelog/#fix","text":"add and abstract string preprojecissing of proj, sub, sess","title":"Fix"},{"location":"changelog/#v102-2020-11-23","text":"","title":"v1.0.2 (2020-11-23)"},{"location":"changelog/#fix_1","text":"remove other heudiconv directories that messup overwrite remove other heudiconv directories that messup overwrite add blank space before heudiconv's overwrite flag add blank space before heudiconv's overwrite flag","title":"Fix"},{"location":"changelog/#v101-2020-11-17","text":"","title":"v1.0.1 (2020-11-17)"},{"location":"changelog/#perf","text":"capture duplicate warnings","title":"Perf"},{"location":"changelog/#fix_2","text":"overwrite : don't ignore errors, and pass flag to heudiconv bring back saving the file after setting DICOM header","title":"Fix"},{"location":"changelog/#v100-2020-10-22","text":"","title":"v1.0.0 (2020-10-22)"},{"location":"changelog/#refactor","text":"Merge pull request #47 from brown-bnc/feat/add-documentation --verbose and --very verbose for postprocess change the format of CLI inputs to be consistent to unix style put dicom-expoert and run-heudiconv back in separate files dicom_export : clomplete options/inputs and run through WIP : add dicom_export to xnat2bids_typer WIP : start skeleton for typer cli for xnat2bids","title":"Refactor"},{"location":"changelog/#breaking-change","text":"Changes the CLI to use typer, adds MkDocs, pre-commit hooks and Github Actions","title":"BREAKING CHANGE"},{"location":"changelog/#fix_3","text":"bring back lost build-system from pyproject file get xnat2bids and tests back working adjust sintax for commands in separate files","title":"Fix"},{"location":"changelog/#feat","text":"transition posprocessing to typer","title":"Feat"},{"location":"changelog/#v017-2020-07-06","text":"","title":"v0.1.7 (2020-07-06)"},{"location":"changelog/#fix_4","text":"tests : add full path and make sequences strings tests : add misssing imports fixes to logging, seriesDescList indexing and dicom extension (.IMA)","title":"Fix"},{"location":"changelog/#feat_1","text":"WIP working on overwrite behavior add identifier to logfiles check dicom extension, add formatting","title":"Feat"},{"location":"changelog/#v016-2020-05-28","text":"","title":"v0.1.6 (2020-05-28)"},{"location":"changelog/#fix_5","text":"put back the poetry.lock, didn't know it was needed for the docker build add session to the path of IntendedFor nii file","title":"Fix"},{"location":"changelog/#v015-2020-05-22","text":"","title":"v0.1.5 (2020-05-22)"},{"location":"changelog/#v014-2020-05-19","text":"","title":"v0.1.4 (2020-05-19)"},{"location":"changelog/#v013-2020-04-08","text":"","title":"v0.1.3 (2020-04-08)"},{"location":"changelog/#feat_2","text":"Add files and functions to insert IntendedFor field add --session_suffix as a required input","title":"Feat"},{"location":"changelog/#v012-2020-03-09","text":"","title":"v0.1.2 (2020-03-09)"},{"location":"changelog/#fix_6","text":"coloredlogs respect logging level","title":"Fix"},{"location":"changelog/#feat_3","text":"add minimal test to have the ability of making sure things don't break add --skilist to arguments","title":"Feat"},{"location":"changelog/#v011-2020-03-06","text":"","title":"v0.1.1 (2020-03-06)"},{"location":"changelog/#fix_7","text":"We are now using SSL!","title":"Fix"},{"location":"changelog/#v010-2020-02-28","text":"","title":"v0.1.0 (2020-02-28)"},{"location":"changelog/#fix_8","text":"enter password only once for xnat2bids","title":"Fix"},{"location":"changelog/#v010-beta-2020-02-26","text":"","title":"v0.1.0-beta (2020-02-26)"},{"location":"changelog/#fix_9","text":"remove heudiconv extras make host optional to use default value remove bid_validator, fix empty log, parse only know args bidsmap now works properly. Add missing arguments names are no longer converted to lower-case","title":"Fix"},{"location":"changelog/#feat_4","text":"add color to logging ask for password, add logging, add sequence list","title":"Feat"},{"location":"changelog/#010-alpha-2020-02-18","text":"","title":"0.1.0-alpha (2020-02-18)"},{"location":"changelog/#fix_10","text":"remove selected list change dicom tags to match bidsname for protocol and series description miscelaneous typo/type errors use argument bidsmap json file, take logs out of bids directory replace undescores for dashes in session and subject labels add xnat_tools to module imports user variable for bids_root_dir instead of hardcoded path add package prefix to imports","title":"Fix"},{"location":"changelog/#feat_5","text":"detect multiple runs handle aascout planes and mprage rms add xnat2bids code bring in xnat2bids code from plugin","title":"Feat"},{"location":"code_standards/","text":"We welcome issues and pull requests to help improve the xnat-tools model. We use the following guidelines to ensure standards are met. Workflow \u00b6 When working on xnat-tools, we using a flow a simple flow based on following rules: Use topic/feature branches, no direct commits on master. Perform tests and code reviews before merges into master, not afterwards. Everyone starts from master, and targets master. Commit messages reflect intent. Branches \u00b6 master is the default branch and where releases are made off. This branch should be in clean/working conditions at all times. This branch is protected and can only be merged from Pull Requests for topic branches topic branches are created for new features, fixes, or really any changes Comment styles \u00b6 Developers should use Conventional Commits . Commitizen comes installed as a dev dependency via poetry and you can use it to help you format your commit messages. It can also be installed as stand alone CLI or as a plugin on VSCODE. We use Commitizen in GitHub Actions to automatically bump the version and update the CHANGELOG.md of this package according to the commit messages. Using conventional commits guarantees than Commitizen works appropriately. Testing \u00b6 In the future we will add testing as part of CI. For the moment, you'll need to test yourself pytest is the library used for testing. To run all of the tests: poetry run pytest -x -s -o log_cli=true --log-cli-level=INFO To run only a file poetry run pytest - x - s - o log_cli = true -- log - cli - level = INFO tests / integration / test_export_typer . py -s makes sure that stdout is printed to terminal -o log_cli=true --log-cli-level=INFO allows the logger output to go to cli -x exists on first failure You will need to have a local .env file where you set some environment variables, i.e. XNAT_PASS At the moment the tests can not run bids validation. To do so, you can comment out the line that cleans the output directory and run the validator manually using docker. For instance bids_directory= ${ PWD } /tests/xnat2bids/ashenhav/study-1222/bids/ docker run -ti --rm -v ${ bids_directory } :/data:ro bids/validator /data Code Style \u00b6 Pre-Commit hooks \u00b6 This repository has pre-commit hooks configured to enforce typing and formatting. To set up the hooks, run poetry run pre-commit install Now, you hooks will run on git commit If you would like to run on all files (not just staged ones), you can run poetry run pre-commit run --all-files The following hooks are set up - isort - Sorting imports - black - Formatting - flake8 - Linting - mypy - Typing Most of these tools are installed as dev dependencies so you can also run them outside of the hooks. More details below Typing \u00b6 Please use type hints on all signatures where reasonable. This will make sure the code is more readable, can be statically tested for type soundness, and helps fill in the documentation. Run the below to check for type errors: poetry run mypy xnat_tools Formatting \u00b6 black \u00b6 The code must conform to black 's standards and this is automatically checked via github actions. While it is highly recommended to run the pre-commit hooks, you can also run black directly to automatically fix files with poetry run black . from the root of the xnat_tools directory. flake8 \u00b6 The code must not have any egregious linting errors. And others should be minimized as reasonable. Check for egregious errors: poetry run flake8 xnat_tools -- count -- select = E9 , F63 , F7 , F82 -- show - source -- statistics Check for all warnings: poetry run flake8 xnat_tools -- count -- exit - zero -- max - complexity = 12 -- max - line - length = 88 -- statistics Documentation \u00b6 All functions and methods should have an up to date google style docstring . These docstrings are used to build xnat-tools's documentation website. Additional prose can be added to the website by editing the appropriate markdown file in the docs/ directory. We are using mkdocs-versioning to deploy MkDocs documentation that keeps track of the different versions. The deployment happens in CI and there are few things to be aware of The configuration file for the documentation mkdocs.yml is rendered in CI depending on the branch and software version. For non-main branches the version is set to dev , for the main branch, we read the version from the pyproject.toml The following documentation files are updated in CI, so you don't need to manually update them: docs/xnat2bids.md docs/dicom_export.md docs/run_heudiconv.md docs/bids_postprocess.md docs/changelog.md Running the documentation locally (within a Poetry shell or add poetry run ) export VERSION = dev ( envsubst '${VERSION}' < mkdocs - template . yml ) > mkdocs . yml mkdir site #bring contents from gh-pages branch mkdocs - versioning sync #clean dev environment and problematic .git folder rm - rf ./ site / dev / rm - rf ./ site /. git / #build docs mkdocs build To serve: mkdocs serve To deploy: mkdocs-versioning -v deploy \u26a0 After deployment, mkdocs prints [ gh_deploy . py : 134 ]: Your documentation should shortly be available at : https : // brown - bnc . github . io / xnat_tools / However, the URL is https://brown-bnc.github.io/xnat-tools/ dash instead of underscore Documentation for console scripts \u00b6 The markdown files for console scripts are generated by the typer-cli . Here is an example of how to call it manually from your Poetry shell i.e. poetry shell PYTHONPATH =< path - to - xnat - tools > typer ./ dicom_export . py utils docs -- name xnat - dicom - export -- output ../ docs / dicom_export . md \u26a0 Remember, these files are updated by CI. While you can update them manually, they will be overwritten in CI according to the latest content","title":"Code standards"},{"location":"code_standards/#workflow","text":"When working on xnat-tools, we using a flow a simple flow based on following rules: Use topic/feature branches, no direct commits on master. Perform tests and code reviews before merges into master, not afterwards. Everyone starts from master, and targets master. Commit messages reflect intent.","title":"Workflow"},{"location":"code_standards/#branches","text":"master is the default branch and where releases are made off. This branch should be in clean/working conditions at all times. This branch is protected and can only be merged from Pull Requests for topic branches topic branches are created for new features, fixes, or really any changes","title":"Branches"},{"location":"code_standards/#comment-styles","text":"Developers should use Conventional Commits . Commitizen comes installed as a dev dependency via poetry and you can use it to help you format your commit messages. It can also be installed as stand alone CLI or as a plugin on VSCODE. We use Commitizen in GitHub Actions to automatically bump the version and update the CHANGELOG.md of this package according to the commit messages. Using conventional commits guarantees than Commitizen works appropriately.","title":"Comment styles"},{"location":"code_standards/#testing","text":"In the future we will add testing as part of CI. For the moment, you'll need to test yourself pytest is the library used for testing. To run all of the tests: poetry run pytest -x -s -o log_cli=true --log-cli-level=INFO To run only a file poetry run pytest - x - s - o log_cli = true -- log - cli - level = INFO tests / integration / test_export_typer . py -s makes sure that stdout is printed to terminal -o log_cli=true --log-cli-level=INFO allows the logger output to go to cli -x exists on first failure You will need to have a local .env file where you set some environment variables, i.e. XNAT_PASS At the moment the tests can not run bids validation. To do so, you can comment out the line that cleans the output directory and run the validator manually using docker. For instance bids_directory= ${ PWD } /tests/xnat2bids/ashenhav/study-1222/bids/ docker run -ti --rm -v ${ bids_directory } :/data:ro bids/validator /data","title":"Testing"},{"location":"code_standards/#code-style","text":"","title":"Code Style"},{"location":"code_standards/#pre-commit-hooks","text":"This repository has pre-commit hooks configured to enforce typing and formatting. To set up the hooks, run poetry run pre-commit install Now, you hooks will run on git commit If you would like to run on all files (not just staged ones), you can run poetry run pre-commit run --all-files The following hooks are set up - isort - Sorting imports - black - Formatting - flake8 - Linting - mypy - Typing Most of these tools are installed as dev dependencies so you can also run them outside of the hooks. More details below","title":"Pre-Commit hooks"},{"location":"code_standards/#typing","text":"Please use type hints on all signatures where reasonable. This will make sure the code is more readable, can be statically tested for type soundness, and helps fill in the documentation. Run the below to check for type errors: poetry run mypy xnat_tools","title":"Typing"},{"location":"code_standards/#formatting","text":"","title":"Formatting"},{"location":"code_standards/#black","text":"The code must conform to black 's standards and this is automatically checked via github actions. While it is highly recommended to run the pre-commit hooks, you can also run black directly to automatically fix files with poetry run black . from the root of the xnat_tools directory.","title":"black"},{"location":"code_standards/#flake8","text":"The code must not have any egregious linting errors. And others should be minimized as reasonable. Check for egregious errors: poetry run flake8 xnat_tools -- count -- select = E9 , F63 , F7 , F82 -- show - source -- statistics Check for all warnings: poetry run flake8 xnat_tools -- count -- exit - zero -- max - complexity = 12 -- max - line - length = 88 -- statistics","title":"flake8"},{"location":"code_standards/#documentation","text":"All functions and methods should have an up to date google style docstring . These docstrings are used to build xnat-tools's documentation website. Additional prose can be added to the website by editing the appropriate markdown file in the docs/ directory. We are using mkdocs-versioning to deploy MkDocs documentation that keeps track of the different versions. The deployment happens in CI and there are few things to be aware of The configuration file for the documentation mkdocs.yml is rendered in CI depending on the branch and software version. For non-main branches the version is set to dev , for the main branch, we read the version from the pyproject.toml The following documentation files are updated in CI, so you don't need to manually update them: docs/xnat2bids.md docs/dicom_export.md docs/run_heudiconv.md docs/bids_postprocess.md docs/changelog.md Running the documentation locally (within a Poetry shell or add poetry run ) export VERSION = dev ( envsubst '${VERSION}' < mkdocs - template . yml ) > mkdocs . yml mkdir site #bring contents from gh-pages branch mkdocs - versioning sync #clean dev environment and problematic .git folder rm - rf ./ site / dev / rm - rf ./ site /. git / #build docs mkdocs build To serve: mkdocs serve To deploy: mkdocs-versioning -v deploy \u26a0 After deployment, mkdocs prints [ gh_deploy . py : 134 ]: Your documentation should shortly be available at : https : // brown - bnc . github . io / xnat_tools / However, the URL is https://brown-bnc.github.io/xnat-tools/ dash instead of underscore","title":"Documentation"},{"location":"code_standards/#documentation-for-console-scripts","text":"The markdown files for console scripts are generated by the typer-cli . Here is an example of how to call it manually from your Poetry shell i.e. poetry shell PYTHONPATH =< path - to - xnat - tools > typer ./ dicom_export . py utils docs -- name xnat - dicom - export -- output ../ docs / dicom_export . md \u26a0 Remember, these files are updated by CI. While you can update them manually, they will be overwritten in CI according to the latest content","title":"Documentation for console scripts"},{"location":"dev_setup/","text":"Setting Up your Development Environment \u00b6 This instructions are for MacOS, while they should roughly be the same for Windows and Linux, they are untested in those environments: 1. Package Manager \u00b6 Homebrew is a popular package manager for MacOS. It can be installed as follows: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Chocolatey is a popular package manager for Windows. To install, run the following from a priviledged powershell prompt: Set - ExecutionPolicy Bypass - Scope Process - Force ; [ System . Net . ServicePointManager ]:: SecurityProtocol = [ System . Net . ServicePointManager ]:: SecurityProtocol - bor 3072 ; iex (( New - Object System . Net . WebClient ) . DownloadString ( 'https://chocolatey.org/install.ps1' )) 2. PYENV \u00b6 Installation \u00b6 pyenv allows you to run and manage multiple versions of Python, all in isolations from your system's Python. If this is your first time using pyenv you can learn more about isuing it in this blog post brew install pyenv Append pyenv init to bash's profile $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile And restart your SHELL exec \"$SHELL\" List versions of Python available to install \u00b6 pyenv install --list Install most recent stable version \u00b6 A stable version means there is no -dev of -rc after the name. For instance run pyenv install 3.7.4 Activate global environment \u00b6 pyenv global 3.7.4 Listing available versions to the system \u00b6 pyenv versions Configuring a local environment \u00b6 When you are in a folder, you can configure the version of the Python that is activated when you are calling Python within that folder by calling for instance pyenv local 3.8.0 within your directory. This will create a hidden file .python-version in the current directory. 3. PIPX \u00b6 PIPX allows you to install Python (and Ruby) CLI utilities in their own environment, without contaminating your global environment Installation \u00b6 python -m pip install pipx 5. Poetry \u00b6 Poetry handles dependency and virtual-environment-management in a way that\u2019s very intuitive. pipx install poetry Configure poetry to create virtual environments inside the project's root directory \u00b6 poetry config virtualenvs.in-project true Making sure that Poetry is using Pyenvs python \u00b6 poetry env use $(pyenv which python)","title":"Setting Up"},{"location":"dev_setup/#setting-up-your-development-environment","text":"This instructions are for MacOS, while they should roughly be the same for Windows and Linux, they are untested in those environments:","title":"Setting Up your Development Environment"},{"location":"dev_setup/#1-package-manager","text":"Homebrew is a popular package manager for MacOS. It can be installed as follows: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Chocolatey is a popular package manager for Windows. To install, run the following from a priviledged powershell prompt: Set - ExecutionPolicy Bypass - Scope Process - Force ; [ System . Net . ServicePointManager ]:: SecurityProtocol = [ System . Net . ServicePointManager ]:: SecurityProtocol - bor 3072 ; iex (( New - Object System . Net . WebClient ) . DownloadString ( 'https://chocolatey.org/install.ps1' ))","title":"1. Package Manager"},{"location":"dev_setup/#2-pyenv","text":"","title":"2. PYENV"},{"location":"dev_setup/#installation","text":"pyenv allows you to run and manage multiple versions of Python, all in isolations from your system's Python. If this is your first time using pyenv you can learn more about isuing it in this blog post brew install pyenv Append pyenv init to bash's profile $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile And restart your SHELL exec \"$SHELL\"","title":"Installation"},{"location":"dev_setup/#list-versions-of-python-available-to-install","text":"pyenv install --list","title":"List versions of Python available to install"},{"location":"dev_setup/#install-most-recent-stable-version","text":"A stable version means there is no -dev of -rc after the name. For instance run pyenv install 3.7.4","title":"Install most recent stable version"},{"location":"dev_setup/#activate-global-environment","text":"pyenv global 3.7.4","title":"Activate global environment"},{"location":"dev_setup/#listing-available-versions-to-the-system","text":"pyenv versions","title":"Listing available versions to the system"},{"location":"dev_setup/#configuring-a-local-environment","text":"When you are in a folder, you can configure the version of the Python that is activated when you are calling Python within that folder by calling for instance pyenv local 3.8.0 within your directory. This will create a hidden file .python-version in the current directory.","title":"Configuring a local environment"},{"location":"dev_setup/#3-pipx","text":"PIPX allows you to install Python (and Ruby) CLI utilities in their own environment, without contaminating your global environment","title":"3. PIPX"},{"location":"dev_setup/#installation_1","text":"python -m pip install pipx","title":"Installation"},{"location":"dev_setup/#5-poetry","text":"Poetry handles dependency and virtual-environment-management in a way that\u2019s very intuitive. pipx install poetry","title":"5. Poetry"},{"location":"dev_setup/#configure-poetry-to-create-virtual-environments-inside-the-projects-root-directory","text":"poetry config virtualenvs.in-project true","title":"Configure poetry to create virtual environments inside the project's root directory"},{"location":"dev_setup/#making-sure-that-poetry-is-using-pyenvs-python","text":"poetry env use $(pyenv which python)","title":"Making sure that Poetry is using Pyenvs python"},{"location":"dicom_export/","text":"xnat-dicom-export \u00b6 Export XNAT DICOM images in an experiment to a BIDS friendly format Usage : $ xnat-dicom-export [ OPTIONS ] SESSION BIDS_ROOT_DIR Arguments : SESSION : XNAT Session ID, that is the Accession # for an experiment. [required] BIDS_ROOT_DIR : Root output directory for exporting the files [required] Options : -u, --user TEXT : XNAT User -p, --pass TEXT : XNAT Password -h, --host TEXT : XNAT'sURL [default: https://bnc.brown.edu/xnat] -S, --session-suffix TEXT : Suffix of the session for BIDS defaults to 01. This will produce a session label of sess-01. You likely only need to change the default for multi-session studies [default: 01] -f, --bidsmap-file TEXT : Bidsmap JSON file to correct sequence names [default: ] -i, --includeseq INTEGER : Include this sequence only, can specify multiple times [default: ] -s, --skipseq INTEGER : Exclude this sequence, can specify multiple times [default: ] --log-id TEXT : ID or suffix to append to logfile, If empty, date is appended [default: 01-14-2021-21-43-44] -v, --verbose : Verbose level. Can be specified multiple times to increase verbosity [default: 0] --overwrite : Remove directories where prior results for session/participant may exist [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"xnat-dicom-export"},{"location":"dicom_export/#xnat-dicom-export","text":"Export XNAT DICOM images in an experiment to a BIDS friendly format Usage : $ xnat-dicom-export [ OPTIONS ] SESSION BIDS_ROOT_DIR Arguments : SESSION : XNAT Session ID, that is the Accession # for an experiment. [required] BIDS_ROOT_DIR : Root output directory for exporting the files [required] Options : -u, --user TEXT : XNAT User -p, --pass TEXT : XNAT Password -h, --host TEXT : XNAT'sURL [default: https://bnc.brown.edu/xnat] -S, --session-suffix TEXT : Suffix of the session for BIDS defaults to 01. This will produce a session label of sess-01. You likely only need to change the default for multi-session studies [default: 01] -f, --bidsmap-file TEXT : Bidsmap JSON file to correct sequence names [default: ] -i, --includeseq INTEGER : Include this sequence only, can specify multiple times [default: ] -s, --skipseq INTEGER : Exclude this sequence, can specify multiple times [default: ] --log-id TEXT : ID or suffix to append to logfile, If empty, date is appended [default: 01-14-2021-21-43-44] -v, --verbose : Verbose level. Can be specified multiple times to increase verbosity [default: 0] --overwrite : Remove directories where prior results for session/participant may exist [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"xnat-dicom-export"},{"location":"installation/","text":"Using Docker \u00b6 docker pull docker pull brownbnc / xnat_tools : < version > Version: latest : Is the build of master vX.X.X : Latest tagged stable release You can confirm the tags here Using Python \u00b6 Prerequisites: \u00b6 We first need to install the dcm2niix . This is a dependency of Heudiconv that doesn't get installed by Heudiconv itself brew install dcm2niix PIPX \u00b6 Most users only need to interact with the command-line utilities provided by xnat-tools . In this case, we recommend using pipx . Please check their installation instructions . Once pipx is installed you will need to install Heudiconv and xnat-tools as stand-alone applications as follows: pipx install heudiconv pipx install git + https : // github . com / brown - bnc / xnat - tools . git @ v1 . 0.3 The command above installs the latest tagged release of xnat-tools . If you want to install the development version (main branch) you can run: pipx install git + https : // github . com / brown - bnc / xnat - tools . git PIP \u00b6 A Tagged Release pip install git + https : // github . com / brown - bnc / xnat - tools . git @ v1 . 0.3 Development (Master branch) pip install git + https : // github . com / brown - bnc / xnat - tools . git Poetry \u00b6 This package is developed using Poetry . If you are familiar with Poetry, you can add it to your project via poetry add git + https : // github . com / brown - bnc / xnat - tools . git or for a tagged release poetry add git + https : // github . com / brown - bnc / xnat - tools . git @ v1 . 0.3","title":"Installation"},{"location":"installation/#using-docker","text":"docker pull docker pull brownbnc / xnat_tools : < version > Version: latest : Is the build of master vX.X.X : Latest tagged stable release You can confirm the tags here","title":"Using Docker"},{"location":"installation/#using-python","text":"","title":"Using Python"},{"location":"installation/#prerequisites","text":"We first need to install the dcm2niix . This is a dependency of Heudiconv that doesn't get installed by Heudiconv itself brew install dcm2niix","title":"Prerequisites:"},{"location":"installation/#pipx","text":"Most users only need to interact with the command-line utilities provided by xnat-tools . In this case, we recommend using pipx . Please check their installation instructions . Once pipx is installed you will need to install Heudiconv and xnat-tools as stand-alone applications as follows: pipx install heudiconv pipx install git + https : // github . com / brown - bnc / xnat - tools . git @ v1 . 0.3 The command above installs the latest tagged release of xnat-tools . If you want to install the development version (main branch) you can run: pipx install git + https : // github . com / brown - bnc / xnat - tools . git","title":"PIPX"},{"location":"installation/#pip","text":"A Tagged Release pip install git + https : // github . com / brown - bnc / xnat - tools . git @ v1 . 0.3 Development (Master branch) pip install git + https : // github . com / brown - bnc / xnat - tools . git","title":"PIP"},{"location":"installation/#poetry","text":"This package is developed using Poetry . If you are familiar with Poetry, you can add it to your project via poetry add git + https : // github . com / brown - bnc / xnat - tools . git or for a tagged release poetry add git + https : // github . com / brown - bnc / xnat - tools . git @ v1 . 0.3","title":"Poetry"},{"location":"run_heudiconv/","text":"xnat-heudiconv \u00b6 Run Heudiconv Usage : $ xnat-heudiconv [ OPTIONS ] PROJECT SUBJECT BIDS_ROOT_DIR Arguments : PROJECT : XNAT's Project ID [required] SUBJECT : XNAT's subject ID [required] BIDS_ROOT_DIR : Root output directory for exporting the files [required] Options : -S, --session-suffix TEXT : Suffix of the session for BIDS defaults to 01. This will produce a session label of sess-01. You likely only need to change the default for multi-session studies [default: 01] --log-id TEXT : ID or suffix to append to logfile, If empty, date is appended [default: 01-14-2021-21-43-45] --overwrite / --no-overwrite : Remove directories where prior results for session/participant may exist [default: False] --cleanup / --no-cleanup : Remove xnat-export folder and move logs to derivatives/xnat/logs [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"xnat-heudiconv"},{"location":"run_heudiconv/#xnat-heudiconv","text":"Run Heudiconv Usage : $ xnat-heudiconv [ OPTIONS ] PROJECT SUBJECT BIDS_ROOT_DIR Arguments : PROJECT : XNAT's Project ID [required] SUBJECT : XNAT's subject ID [required] BIDS_ROOT_DIR : Root output directory for exporting the files [required] Options : -S, --session-suffix TEXT : Suffix of the session for BIDS defaults to 01. This will produce a session label of sess-01. You likely only need to change the default for multi-session studies [default: 01] --log-id TEXT : ID or suffix to append to logfile, If empty, date is appended [default: 01-14-2021-21-43-45] --overwrite / --no-overwrite : Remove directories where prior results for session/participant may exist [default: False] --cleanup / --no-cleanup : Remove xnat-export folder and move logs to derivatives/xnat/logs [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"xnat-heudiconv"},{"location":"usage_overview/","text":"Usage Overview \u00b6 This package installs the following executables which constitute the main way that users will interface with xnat-tools xnat2bids : xnat_tools/xnat2bids.py xnat-dicom-export : xnat_tools/dicom_export.py xnat-heudiconv : xnat_tools/run_heudiconv.py bids-postprocess : xnat_tools/bids_postprocess.py xnat2bids exports an XNAT experiment (or MRI session) to the BIDS format in one run. This executable under the hood is performing two operations: Export to a Heudiconv friendly directory structure. We follow the structure suggested by the ReproIn guide , enabling us to use their heuristic file . This step is encapsulated in xnat_tools/dicom_export.py We run Heudiconv using ReproIn heuristic. This step is encapsulated in xnat_tools/run_heudiconv.py In general, users will be interacting only with xnat2bids . However, in cases where troubleshooting is necessary, it may be convenient to run the two steps separately. The first step, dicom_export , is time consuming as all the data needs to be downloaded form the server. If the user can verify that the export looks correct, and the errors happen only when executing run_heudiconv , then running the two steps separately can save significant time. At the moment bids-postprocess is used to insert the IntendedFor field to JSON sidecart for fieldmap data.","title":"Overview"},{"location":"usage_overview/#usage-overview","text":"This package installs the following executables which constitute the main way that users will interface with xnat-tools xnat2bids : xnat_tools/xnat2bids.py xnat-dicom-export : xnat_tools/dicom_export.py xnat-heudiconv : xnat_tools/run_heudiconv.py bids-postprocess : xnat_tools/bids_postprocess.py xnat2bids exports an XNAT experiment (or MRI session) to the BIDS format in one run. This executable under the hood is performing two operations: Export to a Heudiconv friendly directory structure. We follow the structure suggested by the ReproIn guide , enabling us to use their heuristic file . This step is encapsulated in xnat_tools/dicom_export.py We run Heudiconv using ReproIn heuristic. This step is encapsulated in xnat_tools/run_heudiconv.py In general, users will be interacting only with xnat2bids . However, in cases where troubleshooting is necessary, it may be convenient to run the two steps separately. The first step, dicom_export , is time consuming as all the data needs to be downloaded form the server. If the user can verify that the export looks correct, and the errors happen only when executing run_heudiconv , then running the two steps separately can save significant time. At the moment bids-postprocess is used to insert the IntendedFor field to JSON sidecart for fieldmap data.","title":"Usage Overview"},{"location":"xnat2bids/","text":"xnat2bids \u00b6 Export DICOM images from an XNAT experiment to a BIDS compliant directory Usage : $ xnat2bids [ OPTIONS ] SESSION BIDS_ROOT_DIR Arguments : SESSION : XNAT Session ID, that is the Accession # for an experiment. [required] BIDS_ROOT_DIR : Root output directory for exporting the files [required] Options : -u, --user TEXT : XNAT User -p, --pass TEXT : XNAT Password -h, --host TEXT : XNAT'sURL [default: https://bnc.brown.edu/xnat] -S, --session-suffix TEXT : Suffix of the session for BIDS defaults to 01. This will produce a session label of sess-01. You likely only need to change the default for multi-session studies [default: 01] -f, --bidsmap-file TEXT : Bidsmap JSON file to correct sequence names [default: ] -i, --includeseq INTEGER : Include this sequence only, can specify multiple times [default: ] -s, --skipseq INTEGER : Exclude this sequence, can be specified multiple times [default: ] --log-id TEXT : ID or suffix to append to logfile, If empty, date is appended [default: 01-14-2021-21-43-44] -v, --verbose : Verbose level. Can be specified multiple times to increase verbosity [default: 0] --overwrite : Remove directories where prior results for this session/participant [default: False] --cleanup / --no-cleanup : Remove xnat-export folder and move logs to derivatives/xnat/logs [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"xnat2bids"},{"location":"xnat2bids/#xnat2bids","text":"Export DICOM images from an XNAT experiment to a BIDS compliant directory Usage : $ xnat2bids [ OPTIONS ] SESSION BIDS_ROOT_DIR Arguments : SESSION : XNAT Session ID, that is the Accession # for an experiment. [required] BIDS_ROOT_DIR : Root output directory for exporting the files [required] Options : -u, --user TEXT : XNAT User -p, --pass TEXT : XNAT Password -h, --host TEXT : XNAT'sURL [default: https://bnc.brown.edu/xnat] -S, --session-suffix TEXT : Suffix of the session for BIDS defaults to 01. This will produce a session label of sess-01. You likely only need to change the default for multi-session studies [default: 01] -f, --bidsmap-file TEXT : Bidsmap JSON file to correct sequence names [default: ] -i, --includeseq INTEGER : Include this sequence only, can specify multiple times [default: ] -s, --skipseq INTEGER : Exclude this sequence, can be specified multiple times [default: ] --log-id TEXT : ID or suffix to append to logfile, If empty, date is appended [default: 01-14-2021-21-43-44] -v, --verbose : Verbose level. Can be specified multiple times to increase verbosity [default: 0] --overwrite : Remove directories where prior results for this session/participant [default: False] --cleanup / --no-cleanup : Remove xnat-export folder and move logs to derivatives/xnat/logs [default: False] --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit.","title":"xnat2bids"}]}