{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to xnat-tools","text":"<p>XNAT tools is maintained by members of the Behavioral Neuroimaging Core at Brown University. This package facilitates the export and conversion of data stored in Brown's XNAT platform, to the BIDS format. The optimal way to install and run this package depends on your computation environment. We outline all the possibilities.</p>"},{"location":"bids_postprocess/","title":"<code>bids_postprocess</code>","text":"<p>Script for performing post BIDSIFY processing. At the moment it inserts the IntendedFor field to JSON sidecart for fieldmap data</p> <p>Usage:</p> <pre><code>$ bids_postprocess [OPTIONS] BIDS_EXPERIMENT_DIR\n</code></pre> <p>Arguments:</p> <ul> <li><code>BIDS_EXPERIMENT_DIR</code>: Root output directory for exporting the files  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: XNAT User</li> <li><code>-p, --pass TEXT</code>: XNAT Password</li> <li><code>--session TEXT</code>: XNAT Session ID, that is the Accession # for an experiment.  [default: ]</li> <li><code>-n, --includesess TEXT</code>: Include this session only, this flag can be specified multiple time  [default: ]</li> <li><code>-i, --includesubj TEXT</code>: Include this participant only, this flag can be specified multiple times  [default: ]</li> <li><code>-s, --skipsubj TEXT</code>: Skip this participant, this flag can be specified multiple times  [default: ]</li> <li><code>-k, --skipsess TEXT</code>: Skip this participant, this flag can be specified multiple times  [default: ]</li> <li><code>--log-file TEXT</code>: File to send logs to  [default: ]</li> <li><code>-v, --verbose</code>: Verbosity level. This flag can be specified multiple times to increase verbosity  [default: 0]</li> <li><code>--overwrite</code>: Inititate BIDS post-processing on all subjects located at the specified BIDS             directory, with intent to ovewrite existing data.  [default: False]</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"code_standards/","title":"Code standards","text":"<p>We welcome issues and pull requests to help improve the xnat-tools model.  We use the following guidelines to ensure standards are met.</p>"},{"location":"code_standards/#workflow","title":"Workflow","text":"<p>When working on xnat-tools, we using a flow a simple flow based on following rules:</p> <ol> <li>Use topic/feature branches, no direct commits on main.</li> <li>Perform tests and code reviews before merges into main, not afterwards.</li> <li>Everyone starts from main, and targets main.</li> <li>Commit messages reflect intent.</li> </ol>"},{"location":"code_standards/#branches","title":"Branches","text":"<ul> <li><code>main</code> is the default branch and where releases are made off. This branch should be in clean/working conditions at all times. This branch is protected and can only be merged from Pull Requests for topic branches</li> <li>topic branches are created for new features, fixes, or really any changes</li> </ul>"},{"location":"code_standards/#comment-styles","title":"Comment styles","text":"<p>Developers should use Conventional Commits. Commitizen comes installed as a <code>dev</code> dependency via poetry and you can use it to help you format your commit messages. It can also be installed as stand alone CLI or as a plugin on VSCODE.</p> <p>We use Commitizen in GitHub Actions to automatically bump the version and update the CHANGELOG.md of this package according to the commit messages. Using conventional commits guarantees than Commitizen works appropriately.  Notice that only few types of commits trigger a bump. At the moment we use the default configuration which includes:</p> <pre><code>bump_pattern = \"^(break|new|fix|hotfix)\"\nbump_map = {\"break\" = \"MAJOR\", \"new\" = \"MINOR\", \"fix\" = \"PATCH\", \"hotfix\" = \"PATCH\"}\n</code></pre> <p>When a PR is merged to the main branch, a dry-run of the Commitizen's bump action is run. If indeed a new version is created, you can manually trigger the publish workflow to tag a release, commit new docs and build and push the docker image to ghcr.io. </p>"},{"location":"code_standards/#testing","title":"Testing","text":"<p>In the future we will add testing as part of CI. For the moment, you'll need to test yourself</p> <p><code>pytest</code> is the library used for testing.</p> <p>To run all of the tests:</p> <pre><code>poetry run pytest -x -s -o log_cli=true --log-cli-level=INFO\n</code></pre> <p>To run only a file</p> <pre><code>poetry run pytest -x -s -o log_cli=true --log-cli-level=INFO tests/integration/test_export_typer.py\n</code></pre> <p><code>-s</code> makes sure that <code>stdout</code> is printed to terminal <code>-o log_cli=true --log-cli-level=INFO</code> allows the logger output to go to cli <code>-x</code> exists on first failure</p> <p>You will need to have a local <code>.env</code> file where you set some environment variables, i.e. <code>XNAT_PASS</code></p> <p>At the moment the tests can not run bids validation. To do so, you can comment out the line that cleans the output directory and run the validator manually using docker. For instance</p> <pre><code>bids_directory=${PWD}/tests/xnat2bids/ashenhav/study-1222/bids/\ndocker run -ti --rm -v ${bids_directory}:/data:ro bids/validator /data\n</code></pre>"},{"location":"code_standards/#deploying","title":"Deploying","text":"<p>When </p>"},{"location":"code_standards/#code-style","title":"Code Style","text":""},{"location":"code_standards/#pre-commit-hooks","title":"Pre-Commit hooks","text":"<p>This repository has pre-commit hooks configured to enforce typing and formatting.</p> <p>To set up the hooks, run </p> <pre><code>poetry run pre-commit install\n</code></pre> <p>Now, you hooks will run on <code>git commit</code></p> <p>If you would like to run on all files (not just staged ones), you can run</p> <pre><code>poetry run pre-commit run --all-files\n</code></pre> <p>The following hooks are set up  - isort - Sorting imports - black - Formatting - flake8 - Linting - mypy - Typing</p> <p>Most of these tools are installed as dev dependencies so you can also run them outside of the hooks. More details below</p>"},{"location":"code_standards/#typing","title":"Typing","text":"<p>Please use type hints on all signatures where reasonable.  This will make sure the code is more readable, can be statically tested for type soundness, and helps fill in the documentation.</p> <p>Run the below to check for type errors:</p> <pre><code>poetry run mypy xnat_tools\n</code></pre>"},{"location":"code_standards/#formatting","title":"Formatting","text":""},{"location":"code_standards/#black","title":"black","text":"<p>The code must conform to <code>black</code>'s standards and this is automatically checked via github actions.  While it is highly recommended to run the pre-commit hooks, you can also run black directly  to automatically fix files with <code>poetry run black .</code> from the root of the <code>xnat_tools</code> directory.</p>"},{"location":"code_standards/#flake8","title":"flake8","text":"<p>The code must not have any egregious linting errors. And others should be minimized as reasonable.</p> <p>Check for egregious errors:</p> <pre><code>poetry run flake8 xnat_tools --count --select=E9,F63,F7,F82 --show-source --statistics\n</code></pre> <p>Check for all warnings:</p> <pre><code>poetry run flake8 xnat_tools --count --exit-zero --max-complexity=12 --max-line-length=88 --statistics\n</code></pre>"},{"location":"code_standards/#documentation","title":"Documentation","text":"<p>All functions and methods should have an up to date google style docstring.  These docstrings are used to build xnat-tools's documentation website.  Additional prose can be added to the website by editing the appropriate markdown file in the <code>docs/</code> directory.</p> <p>We are using mkdocs-versioning to deploy MkDocs documentation that keeps track of the different versions. The deployment happens in CI and there are few things to be aware of</p> <ul> <li>The configuration file for the documentation <code>mkdocs.yml</code> is rendered in CI depending on the branch and software version. For non-main branches the version is set to <code>dev</code>, for the <code>main</code> branch, we read the version from the <code>pyproject.toml</code></li> <li>The following documentation files are updated in CI, so you don't need to manually update them:<ul> <li>docs/xnat2bids.md</li> <li>docs/dicom_export.md</li> <li>docs/run_heudiconv.md</li> <li>docs/bids_postprocess.md</li> <li>docs/changelog.md</li> </ul> </li> </ul> <p>Running the documentation locally (within a Poetry shell or add <code>poetry run</code>)</p> <pre><code>export VERSION=dev\n(envsubst '${VERSION}' &lt; mkdocs-template.yml) &gt; mkdocs.yml\nmkdir site\n#bring contents from gh-pages branch\nmkdocs-versioning sync #clean dev environment and problematic .git folder\nrm -rf ./site/dev/\nrm -rf ./site/.git/\n#build docs\nmkdocs build\n</code></pre> <p>To serve:</p> <pre><code>mkdocs serve\n</code></pre> <p>To deploy:</p> <pre><code>mkdocs-versioning -v deploy\n</code></pre> <p>\u26a0 After deployment, <code>mkdocs</code> prints</p> <pre><code>[gh_deploy.py:134]: Your documentation should shortly be available at: https://brown-bnc.github.io/xnat_tools/ </code></pre> <p>However, the URL is https://brown-bnc.github.io/xnat-tools/ dash instead of underscore</p>"},{"location":"code_standards/#documentation-for-console-scripts","title":"Documentation for console scripts","text":"<p>The markdown files for console scripts are generated by the <code>typer-cli</code>. Here is an example of how to call it manually from your Poetry shell i.e. <code>poetry shell</code></p> <pre><code>PYTHONPATH=&lt;path-to-xnat-tools&gt; typer ./dicom_export.py utils docs --name xnat-dicom-export --output ../docs/dicom_export.md\n</code></pre> <p>\u26a0 Remember, these files are updated by CI. While you can update them manually, they will be overwritten in CI according to the latest content</p>"},{"location":"dev_setup/","title":"Setting Up","text":""},{"location":"dev_setup/#setting-up-your-development-environment","title":"Setting Up your Development Environment","text":"<p>This instructions are for MacOS, while they should roughly be the same for Windows and Linux, they are untested in those environments:</p>"},{"location":"dev_setup/#1-package-manager","title":"1. Package Manager","text":"<p>Homebrew is a popular package manager for MacOS. It can be installed as follows:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n</code></pre> <p>Chocolatey is a popular package manager for Windows. To install, run the following from a priviledged powershell prompt:</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n</code></pre>"},{"location":"dev_setup/#2-pyenv","title":"2. PYENV","text":""},{"location":"dev_setup/#installation","title":"Installation","text":"<p><code>pyenv</code> allows you to run and manage multiple versions of Python, all in isolations from your system's Python. If this is your first time using <code>pyenv</code> you can learn more about isuing it in this blog post</p> <p><code>brew install pyenv</code></p> <p>Append <code>pyenv init</code> to bash's profile</p> <pre><code>$ echo -e 'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n eval \"$(pyenv init -)\"\\nfi' &gt;&gt; ~/.bash_profile\n</code></pre> <p>And restart your SHELL</p> <p><code>exec \"$SHELL\"</code></p>"},{"location":"dev_setup/#list-versions-of-python-available-to-install","title":"List versions of Python available to install","text":"<p><code>pyenv install --list</code></p>"},{"location":"dev_setup/#install-most-recent-stable-version","title":"Install most recent stable version","text":"<p>A stable version means there is no <code>-dev</code> of <code>-rc</code> after the name. For instance run</p> <p><code>pyenv install 3.7.4</code></p>"},{"location":"dev_setup/#activate-global-environment","title":"Activate global environment","text":"<p><code>pyenv global 3.7.4</code></p>"},{"location":"dev_setup/#listing-available-versions-to-the-system","title":"Listing available versions to the system","text":"<p><code>pyenv versions</code></p>"},{"location":"dev_setup/#configuring-a-local-environment","title":"Configuring a local environment","text":"<p>When you are in a folder, you can configure the version of the Python that is activated when you are calling Python within that folder by calling for instance <code>pyenv local 3.8.0</code> within your directory.</p> <p>This will create a hidden file <code>.python-version</code> in the current directory.</p>"},{"location":"dev_setup/#3-pipx","title":"3. PIPX","text":"<p>PIPX allows you to install Python (and Ruby) CLI utilities in their own environment, without contaminating your global environment</p>"},{"location":"dev_setup/#installation_1","title":"Installation","text":"<p><code>python -m pip install pipx</code></p>"},{"location":"dev_setup/#5-poetry","title":"5. Poetry","text":"<p>Poetry handles dependency and virtual-environment-management in a way that\u2019s very intuitive.</p> <p><code>pipx install poetry</code></p>"},{"location":"dev_setup/#configure-poetry-to-create-virtual-environments-inside-the-projects-root-directory","title":"Configure poetry to create virtual environments inside the project's root directory","text":"<p><code>poetry config virtualenvs.in-project true</code></p>"},{"location":"dev_setup/#making-sure-that-poetry-is-using-pyenvs-python","title":"Making sure that Poetry is using Pyenvs python","text":"<p><code>poetry env use $(pyenv which python)</code></p>"},{"location":"dicom_export/","title":"<code>dicom_export</code>","text":"<p>Export XNAT DICOM images in an experiment to a BIDS friendly format</p> <p>Usage:</p> <pre><code>$ dicom_export [OPTIONS] SESSION BIDS_ROOT_DIR\n</code></pre> <p>Arguments:</p> <ul> <li><code>SESSION</code>: XNAT Session ID, that is the Accession # for an experiment.  [required]</li> <li><code>BIDS_ROOT_DIR</code>: Root output directory for exporting the files  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: XNAT User</li> <li><code>-p, --pass TEXT</code>: XNAT Password</li> <li> <p><code>-h, --host TEXT</code>: XNAT's URL  [default: https://xnat.bnc.brown.edu]</p> </li> <li> <p><code>-S, --session-suffix TEXT</code>: The session_suffix is initially set to -1.              This will signify an unspecified session_suffix and default to sess-01.              For multi-session studies, the session label will be pulled from XNAT  [default: -1]</p> </li> <li><code>-f, --bidsmap-file TEXT</code>: Bidsmap JSON file to correct sequence names  [default: ]</li> <li><code>-i, --includeseq INTEGER</code>: Include this sequence only, this flag can specify multiple times  [default: ]</li> <li><code>-s, --skipseq INTEGER</code>: Exclude this sequence, this flag can specify multiple times  [default: ]</li> <li><code>--log-id TEXT</code>: ID or suffix to append to logfile. If empty, current date is used  [default: current date - MM-DD-YYYY-HH-MM-SS]</li> <li><code>-v, --verbose</code>: Verbose level. Can be specified multiple times to increase verbosity  [default: 0]</li> <li><code>--overwrite</code>: Remove directories where prior results for session/participant may exist  [default: False]</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#using-docker","title":"Using Docker","text":"<pre><code>docker pull docker pull brownbnc/xnat_tools:&lt;version&gt;\n</code></pre> <p>Version:</p> <ul> <li><code>latest</code>: Is the build of main</li> <li><code>vX.X.X</code>: Latest tagged stable release</li> </ul> <p>You can confirm the tags here</p>"},{"location":"installation/#using-python","title":"Using Python","text":""},{"location":"installation/#prerequisites","title":"Prerequisites:","text":"<p>We first need to install the dcm2niix . This is a dependency of Heudiconv that doesn't get installed by Heudiconv itself</p> <pre><code>brew install dcm2niix\n</code></pre>"},{"location":"installation/#pipx","title":"PIPX","text":"<p>Most users only need to interact with the command-line utilities provided by <code>xnat-tools</code>. In this case, we recommend using <code>pipx</code>. Please check their installation instructions.</p> <p>Once <code>pipx</code> is installed you will need to install Heudiconv and xnat-tools as stand-alone applications as follows:</p> <pre><code>pipx install heudiconv\npipx install git+https://github.com/brown-bnc/xnat-tools.git@vdev\n</code></pre> <p>The command above installs the latest tagged release of <code>xnat-tools</code>. If you want to install the development version (main branch) you can run:</p> <pre><code>pipx install git+https://github.com/brown-bnc/xnat-tools.git\n</code></pre>"},{"location":"installation/#pip","title":"PIP","text":"<ul> <li>A Tagged Release</li> </ul> <pre><code>pip install git+https://github.com/brown-bnc/xnat-tools.git@vdev\n</code></pre> <ul> <li>Development (Main branch)</li> </ul> <pre><code>pip install git+https://github.com/brown-bnc/xnat-tools.git\n</code></pre>"},{"location":"installation/#poetry","title":"Poetry","text":"<p>This package is developed using Poetry. If you are familiar with Poetry, you can add it to your project via</p> <pre><code>poetry add git+https://github.com/brown-bnc/xnat-tools.git\n</code></pre> <p>or for a tagged release</p> <pre><code>poetry add git+https://github.com/brown-bnc/xnat-tools.git@vdev\n</code></pre>"},{"location":"run_heudiconv/","title":"<code>run_heudiconv</code>","text":"<p>Run Heudiconv</p> <p>Usage:</p> <pre><code>$ run_heudiconv [OPTIONS] PROJECT SUBJECT BIDS_ROOT_DIR\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: XNAT's Project ID  [required]</li> <li><code>SUBJECT</code>: XNAT's subject ID  [required]</li> <li><code>BIDS_ROOT_DIR</code>: Root output directory for exporting files  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-S, --session-suffix TEXT</code>: The session_suffix is initially set to -1.              This will signify an unspecified session_suffix and default to sess-01.              For multi-session studies, the session label will be pulled from XNAT  [default: -1]</li> <li><code>--log-id TEXT</code>: ID or suffix to append to logfile. If empty, current date is used  [default: current date - MM-DD-YYYY-HH-MM-SS]</li> <li><code>--overwrite / --no-overwrite</code>: Remove directories where prior results for session/participant may exist  [default: False]</li> <li><code>--cleanup / --no-cleanup</code>: Remove xnat-export folder and move logs to derivatives/xnat/logs  [default: False]</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"usage_overview/","title":"Usage Overview","text":"<p>This package installs the following executables which constitute the main way that users will interface with xnat-tools</p> <ul> <li><code>xnat2bids</code> : <code>xnat_tools/xnat2bids.py</code></li> <li><code>xnat-dicom-export</code>: <code>xnat_tools/dicom_export.py</code></li> <li><code>xnat-heudiconv</code>: <code>xnat_tools/run_heudiconv.py</code></li> <li><code>bids-postprocess</code>: <code>xnat_tools/bids_postprocess.py</code></li> </ul> <p><code>xnat2bids</code> exports an XNAT experiment (or MRI session) to the BIDS format in one run. This executable under the hood is performing two operations:</p> <ol> <li>Export to a Heudiconv friendly directory structure. We follow the structure suggested by the ReproIn guide, enabling us to use their heuristic file. This step is encapsulated in <code>xnat_tools/dicom_export.py</code></li> <li>We run Heudiconv using ReproIn heuristic. This step is encapsulated in <code>xnat_tools/run_heudiconv.py</code></li> </ol> <p>In general, users will be interacting only with <code>xnat2bids</code>. However, in cases where troubleshooting is necessary, it may be convenient to run the two steps separately. The first step, <code>dicom_export</code>,  is time consuming as all the data needs to be downloaded form the server. If the user can verify that the export looks correct, and the errors happen only when executing <code>run_heudiconv</code>, then running the two steps separately can save significant time. </p> <p>At the moment <code>bids-postprocess</code> is used to insert the <code>IntendedFor</code> field to JSON sidecart for fieldmap data.</p>"},{"location":"xnat2bids/","title":"<code>xnat2bids</code>","text":"<p>Export DICOM images from an XNAT experiment to a BIDS compliant directory</p> <p>Usage:</p> <pre><code>$ xnat2bids [OPTIONS] SESSION BIDS_ROOT_DIR\n</code></pre> <p>Arguments:</p> <ul> <li><code>SESSION</code>: XNAT Session ID, that is the Accession # for an experiment.  [required]</li> <li><code>BIDS_ROOT_DIR</code>: Root output directory for exporting the files  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: XNAT User</li> <li><code>-p, --pass TEXT</code>: XNAT Password</li> <li><code>-h, --host TEXT</code>: XNAT'sURL  [default: https://xnat.bnc.brown.edu]</li> <li><code>-S, --session-suffix TEXT</code>: The session_suffix is initially set to -1.              This will signify an unspecified session_suffix and default to sess-01.              For multi-session studies, the session label will be pulled from XNAT  [default: -1]</li> <li><code>-f, --bidsmap-file TEXT</code>: Bidsmap JSON file to correct sequence names  [default: ]</li> <li><code>-i, --includeseq INTEGER</code>: Include this sequence only, this flag can specify multiple times  [default: ]</li> <li><code>-s, --skipseq INTEGER</code>: Exclude this sequence, can be specified multiple times  [default: ]</li> <li><code>--log-id TEXT</code>: ID or suffix to append to logfile. If empty, current date is used  [default: current date - MM-DD-YYYY-HH-MM-SS]</li> <li><code>-v, --verbose</code>: Verbose level. This flag can be specified multiple times to increase verbosity  [default: 0]</li> <li><code>--overwrite</code>: Remove directories where prior results for this session/participant  [default: False]</li> <li><code>--cleanup / --no-cleanup</code>: Remove xnat-export folder and move logs to derivatives/xnat/logs  [default: False]</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}]}